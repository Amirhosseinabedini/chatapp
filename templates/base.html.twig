<!DOCTYPE html>
<html lang="en">
    <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate, private">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <meta name="cache-control" content="no-cache">
    <meta name="expires" content="0">
    <meta name="pragma" content="no-cache">
    <title>{% block title %}Chat App{% endblock %}</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>ðŸ’¬</text></svg>">
    
    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#007bff">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="Chat App">
    <link rel="apple-touch-icon" href="/images/icon.svg">
    <link rel="manifest" href="/manifest.json">
        
        <!-- Bootstrap CSS -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <!-- Font Awesome -->
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
        
        {% block stylesheets %}
            <link rel="stylesheet" href="{{ asset('styles/app.css') }}">
        {% endblock %}

        {% block javascripts %}
            {% block importmap %}{{ importmap('app') }}{% endblock %}
        {% endblock %}
        
        <script>
        // Force cache busting for chat pages
        document.addEventListener('DOMContentLoaded', function() {
            // Add timestamp to all internal links
            const links = document.querySelectorAll('a[href*="/chat/"], a[href*="/groups/"]');
            links.forEach(link => {
                if (!link.href.includes('?t=')) {
                    link.href += (link.href.includes('?') ? '&' : '?') + 't=' + Date.now();
                }
            });
            
            // Force reload if page was loaded from cache
            window.addEventListener('pageshow', function(event) {
                if (event.persisted) {
                    window.location.reload();
                }
            });
        });
        </script>
    </head>
    <body class="bg-light">
        <!-- Navigation -->
        {% if app.user %}
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
            <div class="container-fluid">
                <a class="navbar-brand" href="{{ path('app_chat_index') }}">
                    <i class="fas fa-comments me-2"></i>Chat App
                </a>
                
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link" href="{{ path('app_chat_index') }}">
                                <i class="fas fa-comments me-1"></i>Direct Chat
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ path('app_groups_index') }}">
                                <i class="fas fa-users me-1"></i>Groups
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{{ path('app_profile_index') }}">
                                <i class="fas fa-user me-1"></i>Profile
                            </a>
                        </li>
                        {% if 'ROLE_ADMIN' in app.user.roles %}
                        <li class="nav-item">
                            <a class="nav-link" href="{{ path('app_admin_dashboard') }}">
                                <i class="fas fa-cog me-1"></i>Admin
                            </a>
                        </li>
                        {% endif %}
                    </ul>
                    
                    <!-- Global Search -->
                    <div class="navbar-nav me-3">
                        <div class="nav-item">
                            <div class="input-group" style="width: 250px;">
                                <input type="text" class="form-control form-control-sm" placeholder="Search..." id="globalSearch">
                                <button class="btn btn-outline-light btn-sm" type="button">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <ul class="navbar-nav">
                        <!-- Notifications -->
                        <li class="nav-item dropdown">
                            <a class="nav-link position-relative" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-bell"></i>
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationBadge" style="display: none;">
                                    0
                                </span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" style="width: 300px;">
                                <li class="dropdown-header">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>Notifications</span>
                                        <button class="btn btn-sm btn-outline-secondary" onclick="markAllAsRead()">Mark all read</button>
                                    </div>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li id="notificationList">
                                    <div class="text-center text-muted p-3">
                                        <i class="fas fa-bell-slash fa-2x mb-2"></i>
                                        <p class="mb-0">No notifications</p>
                                    </div>
                                </li>
                            </ul>
                        </li>
                        
                        <!-- Theme Toggle -->
                        <li class="nav-item">
                            <button class="nav-link btn btn-link" onclick="toggleTheme()" title="Toggle theme">
                                <i class="fas fa-moon" id="themeIcon"></i>
                            </button>
                        </li>
                        
                        <!-- User Profile Dropdown -->
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown">
                                <div class="position-relative">
                                    {% if app.user.avatar %}
                                        <img src="{{ app.user.avatar }}" alt="Avatar" class="rounded-circle me-2" width="32" height="32">
                                    {% else %}
                                        <i class="fas fa-user-circle me-2"></i>
                                    {% endif %}
                                    <!-- Online Status Indicator -->
                                    <span class="position-absolute bottom-0 end-0 translate-middle p-1 bg-success border border-light rounded-circle" 
                                          style="width: 12px; height: 12px;" 
                                          title="{% if app.user.isOnline %}Online{% else %}Offline{% endif %}">
                                    </span>
                                </div>
                                <div class="d-flex flex-column">
                                    <span class="fw-bold">{{ app.user.displayNameOrEmail }}</span>
                                    <small class="text-light opacity-75">
                                        {% if app.user.isOnline %}
                                            Online
                                        {% else %}
                                            Last seen {{ app.user.lastSeenAt ? app.user.lastSeenAt|date('M j, g:i A') : 'Unknown' }}
                                        {% endif %}
                                    </small>
                                </div>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li class="dropdown-header">
                                    <div class="d-flex align-items-center">
                                        {% if app.user.avatar %}
                                            <img src="{{ app.user.avatar }}" alt="Avatar" class="rounded-circle me-2" width="40" height="40">
                                        {% else %}
                                            <i class="fas fa-user-circle me-2 fa-2x"></i>
                                        {% endif %}
                                        <div>
                                            <div class="fw-bold">{{ app.user.displayNameOrEmail }}</div>
                                            <small class="text-muted">{{ app.user.email }}</small>
                                        </div>
                                    </div>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="{{ path('app_profile_index') }}">
                                    <i class="fas fa-user me-2"></i>View Profile
                                </a></li>
                                <li><a class="dropdown-item" href="{{ path('app_profile_edit') }}">
                                    <i class="fas fa-edit me-2"></i>Edit Profile
                                </a></li>
                                <li><a class="dropdown-item" href="{{ path('app_profile_settings') }}">
                                    <i class="fas fa-cog me-2"></i>Settings
                                </a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="{{ path('app_logout') }}">
                                    <i class="fas fa-sign-out-alt me-2"></i>Logout
                                </a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        {% endif %}

        <!-- Flash Messages -->
        {% for type, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ type == 'error' ? 'danger' : type }} alert-dismissible fade show m-3" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            {% endfor %}
        {% endfor %}

        <!-- Main Content -->
        <main class="container-fluid">
            {% block body %}{% endblock %}
        </main>

        <!-- Bootstrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        
    <!-- PWA and Notification Scripts -->
    <script>
        // Register Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('SW registered: ', registration);
                        
                        // Check for updates
                        registration.addEventListener('updatefound', () => {
                            const newWorker = registration.installing;
                            newWorker.addEventListener('statechange', () => {
                                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                                    // New content is available, show update notification
                                    if (confirm('New version available! Reload to update?')) {
                                        window.location.reload();
                                    }
                                }
                            });
                        });
                    })
                    .catch(registrationError => {
                        console.log('SW registration failed: ', registrationError);
                    });
            });
        }

        // Request notification permission
        if ('Notification' in window && Notification.permission === 'default') {
            Notification.requestPermission().then(permission => {
                if (permission === 'granted') {
                    console.log('Notification permission granted');
                }
            });
        }

        // PWA Install Prompt
        let deferredPrompt;
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            
            // Show install button
            const installButton = document.createElement('button');
            installButton.className = 'btn btn-success btn-sm position-fixed';
            installButton.style.cssText = 'bottom: 20px; right: 20px; z-index: 1000;';
            installButton.innerHTML = '<i class="fas fa-download me-1"></i>Install App';
            installButton.onclick = () => {
                deferredPrompt.prompt();
                deferredPrompt.userChoice.then((choiceResult) => {
                    if (choiceResult.outcome === 'accepted') {
                        console.log('User accepted the install prompt');
                    }
                    deferredPrompt = null;
                    installButton.remove();
                });
            };
            document.body.appendChild(installButton);
        });

        // Handle PWA install
        window.addEventListener('appinstalled', (evt) => {
            console.log('PWA was installed');
        });

        // Offline detection
        window.addEventListener('online', () => {
            console.log('App is online');
            // Trigger background sync if available
            if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {
                navigator.serviceWorker.ready.then(registration => {
                    registration.sync.register('send-message');
                });
            }
        });

        window.addEventListener('offline', () => {
            console.log('App is offline');
        });

        // Theme Toggle Functionality
        function toggleTheme() {
            const body = document.body;
            const themeIcon = document.getElementById('themeIcon');
            const currentTheme = localStorage.getItem('theme') || 'light';
            
            if (currentTheme === 'light') {
                body.classList.add('dark-theme');
                body.classList.remove('bg-light');
                body.classList.add('bg-dark');
                themeIcon.className = 'fas fa-sun';
                localStorage.setItem('theme', 'dark');
            } else {
                body.classList.remove('dark-theme');
                body.classList.remove('bg-dark');
                body.classList.add('bg-light');
                themeIcon.className = 'fas fa-moon';
                localStorage.setItem('theme', 'light');
            }
        }

        // Initialize theme on page load
        document.addEventListener('DOMContentLoaded', function() {
            const savedTheme = localStorage.getItem('theme') || 'light';
            const themeIcon = document.getElementById('themeIcon');
            
            if (savedTheme === 'dark') {
                document.body.classList.add('dark-theme');
                document.body.classList.remove('bg-light');
                document.body.classList.add('bg-dark');
                if (themeIcon) themeIcon.className = 'fas fa-sun';
            }

            // Global Search Functionality
            const globalSearch = document.getElementById('globalSearch');
            if (globalSearch) {
                globalSearch.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        const query = this.value.trim();
                        if (query) {
                            // Redirect to search results page or perform search
                            window.location.href = `/search?q=${encodeURIComponent(query)}`;
                        }
                    }
                });
            }

            // Load notifications
            loadNotifications();
            
            // Set up notification polling
            setInterval(loadNotifications, 30000); // Check every 30 seconds
        });

        // Notification Functions
        function loadNotifications() {
            fetch('/api/notifications')
                .then(response => response.json())
                .then(data => {
                    updateNotificationBadge(data.unreadCount);
                    updateNotificationList(data.notifications);
                })
                .catch(error => {
                    console.error('Error loading notifications:', error);
                });
        }

        function updateNotificationBadge(count) {
            const badge = document.getElementById('notificationBadge');
            if (badge) {
                if (count > 0) {
                    badge.textContent = count;
                    badge.style.display = 'block';
                } else {
                    badge.style.display = 'none';
                }
            }
        }

        function updateNotificationList(notifications) {
            const list = document.getElementById('notificationList');
            if (!list) return;

            if (notifications.length === 0) {
                list.innerHTML = `
                    <div class="text-center text-muted p-3">
                        <i class="fas fa-bell-slash fa-2x mb-2"></i>
                        <p class="mb-0">No notifications</p>
                    </div>
                `;
                return;
            }

            list.innerHTML = notifications.map(notification => `
                <li class="dropdown-item-text ${notification.isRead ? '' : 'bg-light'}">
                    <div class="d-flex align-items-start">
                        <div class="me-2">
                            <i class="fas fa-${getNotificationIcon(notification.type)} text-${getNotificationColor(notification.type)}"></i>
                        </div>
                        <div class="flex-grow-1">
                            <div class="fw-bold">${notification.title}</div>
                            <div class="text-muted small">${notification.message}</div>
                            <div class="text-muted small">${formatTime(notification.createdAt)}</div>
                        </div>
                    </div>
                </li>
            `).join('');
        }

        function getNotificationIcon(type) {
            const icons = {
                'message': 'comment',
                'group': 'users',
                'friend': 'user-plus',
                'system': 'info-circle'
            };
            return icons[type] || 'bell';
        }

        function getNotificationColor(type) {
            const colors = {
                'message': 'primary',
                'group': 'success',
                'friend': 'info',
                'system': 'warning'
            };
            return colors[type] || 'secondary';
        }

        function formatTime(timestamp) {
            const now = new Date();
            const time = new Date(timestamp);
            const diff = now - time;
            
            if (diff < 60000) return 'Just now';
            if (diff < 3600000) return `${Math.floor(diff / 60000)}m ago`;
            if (diff < 86400000) return `${Math.floor(diff / 3600000)}h ago`;
            return time.toLocaleDateString();
        }

        function markAllAsRead() {
            fetch('/api/notifications/mark-all-read', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    loadNotifications();
                }
            })
            .catch(error => {
                console.error('Error marking notifications as read:', error);
            });
        }
    </script>
    </body>
</html>
